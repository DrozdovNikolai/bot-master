name: Python Telegram Bot CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm

    - name: Install dependencies using PDM
      run: |
        pdm lock
        pdm sync

    - name: Run tests
      run: |
        echo "Running tests..."
        pdm run pytest

    - name: Lint with flake8
      run: |
        pdm run flake8 .    

    - name: Build Podman image
      run: |
        podman build -t docker.io/drozdovnikolai/telegram-bot:${{ github.sha }} .
        podman tag docker.io/drozdovnikolai/telegram-bot:${{ github.sha }} docker.io/drozdovnikolai/telegram-bot:latest

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | podman login docker.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Podman image
      run: |
        podman push docker.io/drozdovnikolai/telegram-bot:${{ github.sha }}
        podman push docker.io/drozdovnikolai/telegram-bot:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        podman stop telegram_bot || true
        podman rm telegram_bot || true
        podman pull docker.io/drozdovnikolai/telegram-bot:latest
        podman run -d --name telegram_bot --network="host" telegram-bot:latest
        EOF
